---
- name: Prepare Server for virtual clusters
  hosts: hypervisors
  become: yes  # This allows you to run commands with sudo
  gather_facts: no

  tasks:
    - name: Install epel packages
      package:
        name: epel-release

    - name: Install packages
      package:
        name:
        - libvirt-daemon
        - libvirt
        - qemu-kvm
        - gzip
        - podman
        - make
        - jq
        - tar
        - git
        - python3-pip
        - automake
        - gcc
        - glibc
        - glibc-utils
        - glib2-devel
        - zlib-devel
        - pixman-devel
        - flex
        - bison
        - numad
        - numactl-devel
        - numactl-libs
        - numactl
        - libtool
        - gnutls-utils
        - gnutls-devel
        - libnl3-devel
        - libxml2-devel
        - libpciaccess-devel
        - rpcbind
        - readline-devel
        - rpcgen
        - libxslt-devel
        - bzip2
        - guestfs-tools
        - fuse-sshfs
        state: present

    - name: Check if SSH key exists
      stat:
        path: /root/.ssh/id_rsa
      register: key_file

    - name: Generate SSH key if it doesn't exist
      command: ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ''
      when: key_file.stat.exists == False

    - name: Disable SELinux by setting SELINUX to disabled
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: 'SELINUX=disabled'
      register: selinux

    - name: set selinux enforce 0 if the file was changed (to avoid reboot on first run)
      command: setenforce 0
      when: selinux.changed == True

    - name: Ensure the service is enabled
      service:
        name: libvirtd
        enabled: yes
        state: started

    - name: get go
      get_url:
        url: "https://go.dev/dl/go1.21.3.linux-amd64.tar.gz"  # Specify the remote file path
        dest: /root/go1.21.3.linux-amd64.tar.gz  # Specify the local directory where the file will be copied

    - name: delete old versions of go
      file:
        path: rm -rf /usr/local/go
        state: absent

    - name: extract go version
      command: tar -C /usr/local -xzf /root/go1.21.3.linux-amd64.tar.gz

    - name: Add go path to bashrc
      become: false
      lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:/usr/local/go/bin"
        create: yes  # Add the line if it doesn't exist


    - name: Add user local bin path to bashrc
      become: false
      lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:/usr/local/bin"
        create: yes  # Add the line if it doesn't exist

    - name: clone qemu repo
      get_url:
        url: https://download.qemu.org/qemu-8.2.0.tar.xz
        dest: /root/qemu-8.2.0.tar.xz

    - name: extract qemu from tar
      command: tar xvJf /root/qemu-8.2.0.tar.xz
      args:
        chdir: /root/

    - name: install ninja
      pip:
        name: ninja

    - name: Create symbolic link
      file:
        src: "/usr/local/bin/ninja"
        dest: "/usr/bin/ninja"
        state: link

    - name: configure qemu
      command: ./configure --enable-debug --prefix=/usr/local
      args:
        chdir: /root/qemu-8.2.0

    - name: make qemu
      command: make -j
      args:
        chdir: /root/qemu-8.2.0
        executable: /bin/bash

    - name: make install
      command: make install
      args:
        chdir: /root/qemu-8.2.0

    - name: enable kcli copr
      community.general.copr:
        state: enabled
        name: 'karmab/kcli'

    - name: install kcli
      package:
        name: kcli

    - name: install kubectl
      ansible.builtin.get_url:
        url: https://dl.k8s.io/release/v1.29.1/bin/linux/amd64/kubectl
        dest: /bin/kubectl
        mode: '0770'

    - name: Copy podman images short name
      ansible.builtin.copy:
        src: 'files/001-shortnames.conf'
        dest: /etc/containers/registries.conf.d/001-shortnames.conf

    - name: Copy openshift pull secret
      ansible.builtin.copy:
        src: 'files/openshift_pull.json'
        dest: /root/openshift_pull.json

    - name: "create job for podman system prune"
      ansible.builtin.cron:
        name: "run podman system prune"
        special_time: "daily"
        job: "podman system prune -f"
